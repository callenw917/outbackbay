// schema.prisma

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Spell {
  id                  Int  @default(autoincrement()) @id
  name                String
  level               Int
  school              String
  casting_time_amount Int
  casting_time_unit   String
  duration_amount     Int
  duration_unit       String
  range_amount        Int
  range_unit          String
  area_type           String?
  area_amount         Int?
  area_unit           String?
  attack              String
  save                String
  damage_or_effect    String
  ritual              Boolean
  concentration       Boolean
  verbal              Boolean
  somatic             Boolean
  material            Boolean
  material_object     String
  source              String
  details             String
  link                String
  artificer           Boolean
  bard                Boolean
  cleric              Boolean
  druid               Boolean
  paladin             Boolean
  ranger              Boolean
  sorcerer            Boolean
  warlock             Boolean
  wizard              Boolean
  characters          CharacterSpells[]
}

model Character {
  id          Int  @default(autoincrement()) @id
  name        String
  class       String
  level       Int
  spells      CharacterSpells[]
  user        User? @relation(fields: [userId], references: [id])
  userId      String?
}

model CharacterSpells {
  id          Int  @default(autoincrement()) @id
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  spell       Spell @relation(fields: [spellId], references: [id])
  spellId     Int
  prepared    Boolean
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Characters    Character[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}